version: '3.7'

services:
  traefik:
    image: traefik:v2.4
    environment:
      - TZ=America/Bahia
    command:
      - '--log.level=DEBUG'
      - '--api.dashboard=true'
      - '--metrics.prometheus=true'
      - '--metrics.prometheus.buckets=0.100000, 0.300000, 1.200000, 5.000000'
      - '--metrics.prometheus.addEntryPointsLabels=true'
      - '--metrics.prometheus.addServicesLabels=true'
      - '--tracing.serviceName=tracing'
      - '--tracing.jaeger=true'
      - '--tracing.jaeger.samplingServerURL=http://jaeger:5778/sampling'
      - '--tracing.jaeger.samplingType=const'
      - '--tracing.jaeger.samplingParam=1.0'
      - '--tracing.jaeger.localAgentHostPort=jaeger:6831'
      - '--providers.docker=true'
      - '--providers.docker.swarmmode=true'
      - '--providers.docker.watch'
      - '--log.filePath=/var/log/traefik.log'
      - '--log.format=json'
      - '--accesslog.filepath=/var/log/access.log'
      - '--accesslog.format=json'
      - '--accesslog.fields.names.StartUTC=drop'
    networks:
      - traefik
      - inbound
    volumes:
      - ./acme.json:/acme.json
      - logs:/var/log/traefik
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - target: 80
        published: 80
        mode: host
      - target: 443
        published: 443
        mode: host
      - target: 8080
        published: 8080
        protocol: tcp
        mode: ingress
    deploy:
      mode: global
      labels:
        - 'traefik.http.routers.monitor.rule=Host(`monitor.teiu.com.br`)'
        - 'traefik.http.routers.monitor.service=api@internal'
        - 'traefik.http.routers.monitor.middlewares=auth'
        - 'traefik.http.middlewares.auth.basicauth.users=${CREDENTIAL}'
        - 'traefik.http.services.monitor.loadbalancer.server.port=8080'
        # Dummy service for Swarm port detection. The port can be any valid integer value.
        - 'traefik.http.services.dummy-svc.loadbalancer.server.port=9999'
      placement:
        constraints:
          - node.role == manager
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - inbound
    deploy:
      labels:
        - 'traefik.http.routers.prometheus.rule=Host(`prometheus.teiu.com.br`)'
        - 'traefik.http.routers.prometheus.service=prometheus'
        - 'traefik.http.services.prometheus.loadbalancer.server.port=9090'
        - 'traefik.docker.network=inbound'
      placement:
        constraints:
          - node.role==manager
      restart_policy:
        condition: on-failure
  
  grafana:
    image: grafana/grafana
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./grafana/config.monitoring
    networks:
      - inbound
    user: '104'
    deploy:
      labels:
        - 'traefik.http.routers.grafana.rule=Host(`grafana.teiu.com.br`)'
        - 'traefik.http.routers.grafana.service=grafana'
        - 'traefik.http.services.grafana.loadbalancer.server.port=3000'
        - 'traefik.docker.network=inbound'
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
  portainer:
    image: portainer/portainer
    volumes:
      - portainer_data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - inbound
    deploy:
      labels:
        - 'traefik.http.routers.portainer.rule=Host(`docker.teiu.com.br`)'
        - 'traefik.http.routers.portainer.service=portainer'
        - 'traefik.http.services.portainer.loadbalancer.server.port=9000'
        - 'traefik.docker.network=inbound'
      placement:
        constraints:
          - node.role==manager
      restart_policy:
        condition: on-failure
  jaeger:
    image: jaegertracing/all-in-one:1.17
    environment:
      COLLECTOR_ZIPKIN_HTTP_PORT: 9411
    ports:
      - '5775:5775/udp'
      - '6831:6831/udp'
      - '6832:6832/udp'
      - '5778:5778'
      - '16686:16686'
      - '14268:14268'
      - '9411:9411'
    networks:
      - inbound
    deploy:
      labels:
        - 'traefik.http.routers.jaeger.rule=Host(`jaeger.teiu.com.br`)'
        - 'traefik.http.routers.jaeger.service=jaeger'
        - 'traefik.http.services.jaeger.loadbalancer.server.port=16686'
        - 'traefik.docker.network=inbound'
      placement:
        constraints:
          - node.role==manager
      restart_policy:
        condition: on-failure
  hotrod:
    image: jaegertracing/example-hotrod:1.17
    command: all
    environment:
      JAEGER_AGENT_HOST: 'jaeger'
      JAEGER_AGENT_PORT: '6831'
    networks:
      - inbound
    deploy:
      labels:
        - 'traefik.http.routers.hotrod.rule=Host(`hotrod.teiu.com.br`)'
        - 'traefik.http.routers.hotrod.service=hotrod'
        - 'traefik.http.services.hotrod.loadbalancer.server.port=8080'
        - 'traefik.docker.network=inbound'
      placement:
        constraints:
          - node.role==manager
      restart_policy:
        condition: on-failure

networks:
  traefik:
    driver: overlay
    name: traefik
  inbound:
    driver: overlay
    name: inbound

volumes:
    logs: {}
    prometheus_data: {}
    grafana_data: {}
    portainer_data: {}